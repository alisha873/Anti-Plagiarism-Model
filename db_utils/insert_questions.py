import psycopg2  #postgredql adaptor for python lets u interact w the db
import uuid

#opening connection to db
conn = psycopg2.connect(
    dbname="postgres",
    user="postgres",
    password="beaUxH%6ve_eM7R",
    host="db.jplzoeijacrqgzumqyts.supabase.co",
    port="5432"
)

#used to execute sql commands
cursor= conn.cursor()

questions = [
    ('LC - 1', 'Two Sum', '{Array,HashTable}', 'Easy'),
    ('LC - 2', 'Add Two Numbers', '{LinkedLists}', 'Medium'),
    ('LC - 3', 'Longest Substring Without Repeating Characters', '{Hash Table,String}', 'Medium'),
    ('LC - 4', 'Median of Two Sorted Arrays', '{ArraysandStrings}', 'Hard'),
    ('LC - 5', 'Longest Palindromic Substring', '{TwoPointers,Strings,DynamicProgramming}', 'Medium'),
    ('LC - 10', 'Regular Expression Matching', '{Dynamic Programming}', 'Hard'),
    ('LC - 11', 'Container With Most Water', '{Array,Two Pointers,Greedy}', 'Medium'),
    ('LC - 15', '3Sum', '{Array,Two Pointers,Sorting}', 'Medium'),
    ('LC - 20', 'Valid Parenthesis', '{Stack,Strings}', 'Easy'),
    ('LC - 21', 'Merge Two Sorted Lists', '{Linked Lists}', 'Easy'),
    ('LC - 22', 'Generate Parentheses', '{Greedy,Backtracking}', 'Medium'),
    ('LC - 23', 'Merge k Sorted Lists', '{LinkedLists}', 'Hard'),
    ('LC - 25', 'Reverse Nodes in k-Group', '{LinkedLists}', 'Hard'),
    ('LC - 26', 'Remove Duplicates from Sorted Array', '{Arrays and Strings}', 'Easy'),
    ('LC - 28', 'Find the Index of the First Occurrence in a String', '{Two pointer,string,string matching}', 'Easy'),
    ('LC - 37', 'Sudoku Solver', '{Greedy,Backtracking}', 'Hard'),
    ('LC - 39', 'Combination Sum', '{Greedy,Backtracking}', 'Medium'),
    ('LC - 41', 'First Missing Positive', '{Arrays and Strings}', 'Hard'),
    ('LC - 42', 'Trapping Rain Water', '{Arrays and Strings}', 'Hard'),
    ('LC - 46', 'Permutations', '{Greedy,Backtracking}', 'Medium'),
    ('LC - 49', 'Group Anagrams', '{Array,HashTable,String,Sorting}', 'Medium'),
    ('LC - 51', 'N-Queens', '{Greedy,Backtracking}', 'Hard'),
    ('LC - 53', 'Maximum Subarray', '{Array,Dynamic Programming}', 'Easy'),
    ('LC - 54', 'Spiral Matrix', '{Array,Matrix}', 'Medium'),
    ('LC - 55', 'Jump Game', '{Greedy,Backtracking}', 'Medium'),
    ('LC - 58', 'Length of Last Word', '{String}', 'Easy'),
    ('LC - 66', 'Plus One', '{Array,math}', 'Easy'),
    ('LC - 67', 'Add binary', '{Bit manipulation,string,math,simulation}', 'Easy'),
    ('LC - 70', 'Climbing Stairs', '{Dynamic Programming}', 'Easy'),
    ('LC - 72', 'Edit Distance', '{Dynamic Programming}', 'Hard'),
    ('LC - 73', 'Set Matrix Zeroes', '{Array,Hash Table,Matrix}', 'Medium'),
    ('LC - 76', 'Minimum window Substring', '{Hash Table,Sliding Window}', 'Hard'),
    ('LC - 88', 'Merged Sorted Array', '{Linked Lists}', 'Easy'),
    ('LC - 100', 'Same Tree', '{Trees}', 'Easy'),
    ('LC - 101', 'Symmetric Tree', '{Trees}', 'Easy'),
    ('LC - 102', 'Binary Tree Level Order Traversal', '{Trees and Graphs}', 'Medium'),
    ('LC - 104', 'Maximum Depth of Binary Tree', '{Trees}', 'Easy'),
    ('LC - 105', 'Construct Binary Tree from Preorder and Inorder Traversal', '{Trees and Graphs}', 'Medium'),
    ('LC - 115', 'Distinct Subsequences', '{String,Dynamic programming}', 'Hard'),
    ('LC - 121', 'Best Time to Buy and Sell Stock', '{Array,Dynamic programming}', 'Easy'),
    ('LC - 122', 'Best Time to Buy and Sell Stock', '{Array,greedy,Dynamic programming}', 'Medium'),
    ('LC - 124', 'Binary Tree Maximum Path Sum', '{Trees and Graphs}', 'Hard'),
    ('LC - 125', 'Valid Palindrome', '{Two pointers}', 'Easy'),
    ('LC - 126', 'Word Ladder II', '{Trees and Graphs}', 'Hard'),
    ('LC - 133', 'Clone Graph', '{Trees and Graph}', 'Medium'),
    ('LC - 136', 'Single Number', '{Bit manipulation}', 'Easy'),
    ('LC - 138', 'Copy List from a random pointer', '{Linked Lists}', 'Medium'),
    ('LC - 139', 'Word Break', '{Dynamic Programming}', 'Medium'),
    ('LC - 141', 'Linked list Cycle', '{Linked list,Two pointers}', 'Easy'),
    ('LC - 143', 'Reorder Lists', '{Linked Lists}', 'Medium'),
    ('LC - 150', 'Evaluate Reverse Polish Notation', '{Stack and Queue}', 'Medium'),
    ('LC - 160', 'Intersection of Two Linked Lists', '{Hash table,linked list,two pointers}', 'Easy'),
    ('LC - 169', 'Majority Element', '{Array,Hash table,Sorting}', 'Easy'),
    ('LC - 191', 'Number of 1 bits', '{Divide and conquer,bit manipulation}', 'Easy'),
    ('LC - 200', 'Number of islands', '{Trees and Graphs}', 'Medium'),
    ('LC - 202', 'Happy Number', '{Hash Table}', 'Easy'),
    ('LC - 206', 'Reverse Linked List', '{Linked List}', 'Easy'),
    ('LC - 217', 'Contains Duplicate', '{Array,Hash Table}', 'Easy'),
    ('LC - 225', 'Implement Stack using Queues', '{stack,queue,design}', 'Easy'),
    ('LC - 226', 'Invert Binary Tree', '{Tree,DFS}', 'Easy'),
    ('LC - 231', 'Power of Two', '{Math,recursion,Bit manipulation}', 'Easy'),
    ('LC - 232', 'Implement Queue using Stacks', '{stack,queue,design}', 'Easy'),
    ('LC - 234', 'Palindrome Linked List', '{Linked list,Two pointers,Stack,recursion}', 'Easy'),
    ('LC - 238', 'Product of Array Except Self', '{Array,Prefix Sum}', 'Medium'),
    ('LC - 239', 'Sliding Window Maximum', '{Array,Sliding Window}', 'Hard'),
    ('LC - 242', 'Valid Anagram', '{Arrays and Strings}', 'Easy'),
    ('LC - 258', 'Add digits', '{Math,simulation,number theory}', 'Easy'),
    ('LC - 268', 'Missing Number', '{Array,Hash Table,Math,Binary Search,Bit Manipulation,Sorting}', 'Easy'),
    ('LC - 269', 'Alien Dictionary', '{Trees and Graphs}', 'Hard'),
    ('LC - 278', 'First Bad Version', '{Binary search}', 'Easy'),
    ('LC - 283', 'Move zeroes', '{Array,two pointers}', 'Easy'),
    ('LC - 300', 'Longest Increasing Subsequence', '{Dynamic Programming}', 'Medium'),
    ('LC - 322', 'Coin Change', '{Dynamic Programming}', 'Medium'),
    ('LC - 326', 'Power of Three', '{Math,recursion}', 'Easy'),
    ('LC - 342', 'Power of Four', '{Math,recursion,Bit manipulation}', 'Easy'),
    ('LC - 344', 'Reverse String', '{Arrays and Strings}', 'Easy'),
    ('LC - 349', 'Intersection of Two Arrays', '{Array,hash table,binary search,two pointers,sorting}', 'Easy'),
    ('LC - 350', 'Intersection of Two Arrays II', '{Arrays and Strings}', 'Easy'),
    ('LC - 367', 'Valid Perfect Square', '{Math,binary search}', 'Easy'),
    ('LC - 387', 'First Unique Character in a String', '{Hash Table,Strings}', 'Easy'),
    ('LC - 389', 'Find the Difference', '{Hash table,sorting,string,bit manipulation}', 'Easy'),
    ('LC - 412', 'Fizz Buzz', '{Strings}', 'Easy'),
    ('LC - 441', 'Arranging coins', '{Math,Binary search}', 'Easy'),
    ('LC - 496', 'Next Greater Element I', '{Array,Stack,HashMap}', 'Easy'),
    ('LC - 507', 'Perfect number', '{Math}', 'Easy'),
    ('LC - 561', 'Array Partition', '{Array,greedy,sorting}', 'Easy'),
    ('LC - 628', 'Maximum Product of Three Numbers', '{Array,math,sorting}', 'Easy'),
    ('LC - 733', 'Flood Fill', '{Array,Depth First Search,Breadth First Search}', 'Easy'),
    ('LC - 739', 'Daily Temperatures', '{Stack and Queue}', 'Medium'),
    ('LC - 746', 'Min Cost Climbing Stairs', '{Array,Dynamic Programming}', 'Easy'),
    ('LC - 853', 'Car Fleet', '{Array,Stack}', 'Medium'),
    ('LC - 876', 'Middle of the Linked List', '{Linked List,Two Pointers}', 'Easy'),
    ('LC - 892', 'Surface Area of 3D Shapes', '{Array,math,geometry,matrix}', 'Easy'),
    ('LC - 1009', 'Complement of Base 10 integer', '{Bit manipulation}', 'Easy'),
    ('LC - 1047', 'Remove All Adjacent Duplicates In String', '{String,stack}', 'Easy'),
    ('LC - 1281', 'Subtract the Product and Sum of Digits of an Integer', '{Math}', 'Easy'),
    ('LC - 1295', 'Find Numbers with Even Number of Digits', '{Array,math}', 'Easy'),
    ('LC - 1323', 'Maximum 69 Number', '{Math,greedy}', 'Easy'),
    ('LC - 1346', 'Check If N and Its Double Exist', '{Array,hash table,binary search,two pointers,sorting}', 'Easy'),
    ('LC - 1422', 'Maximum Score After Splitting a String', '{String,prefix sum}', 'Easy'),
    ('LC - 1523', 'Count Odd Numbers in an Interval Range', '{Math}', 'Easy'),
    ('LC - 1752', 'Check if Array Is Sorted and Rotated', '{Array}', 'Easy'),
    ('LC - 1944', 'Number of Visible People in a Queue', '{Array,Stack}', 'Hard'),
    ('LC - 2089', 'Find Target Indices After Sorting Array', '{Array,binary search,sorting}', 'Easy'),
    ('LC - 2185', 'Counting Words With a Given Prefix', '{Arrays and Strings}', 'Easy'),
    ('LC - 2220', 'Minimum Bit Flips to Convert Number', '{Bit manipulation}', 'Easy'),
    ('LC - 3264', 'Final Array State After K Multiplication Operations I', '{Array,heap,simulation,math}', 'Easy'),
    ('LC - 3270', 'Find the Key of the Numbers', '{Math}', 'Easy'),
    ('LC - 3330', 'Find the Original Typed String I', '{String}', 'Easy'),
    ('LC - 3340', 'Check balanced string', '{String}', 'Easy'),
    ('CF - 4A', 'Watermelon', '{Math}', 'Easy'),
    ('CF - 25D', 'Roads not only in Berland', '{Graphs}', 'Medium'),
    ('CF - 50A', 'Domino Piling', '{Math}', 'Easy'),
    ('CF - 71A', 'Way Too Long Words', '{Implementation}', 'Easy'),
    ('CF - 112A', 'Petya and Strings', '{Implementation}', 'Easy'),
    ('CF - 112B', 'Petya and Square', '{Implementation}', 'Easy'),
    ('CF - 116A', 'Tram', '{Implementation}', 'Easy'),
    ('CF - 118A', 'String Task', '{Implementation}', 'Medium'),
    ('CF - 158A', 'Next Round', '{Sorting}', 'Easy'),
    ('CF - 158B', 'Taxi', '{Greedy}', 'Medium'),
    ('CF - 160A', 'Twins', '{Greedy}', 'Medium'),
    ('CF - 200B', 'Drinks', '{Math,Implementation}', 'Easy'),
    ('CF - 208A', 'Dubstep', '{String}', 'Medium'),
    ('CF - 231A', 'Team', '{Implementation}', 'Easy'),
    ('CF - 263A', 'Beautiful Matrix', '{Implementation}', 'Easy'),
    ('CF - 264C', 'Choosing Balls', '{DP}', 'Hard'),
    ('CF - 266A', 'Stones on the Table', '{String}', 'Easy'),
    ('CF - 271A', 'Beautiful Year', '{Brute Force}', 'Medium'),
    ('CF - 275A', 'Lights Out', '{Greedy}', 'Easy'),
    ('CF - 282A', 'Bit++', '{Implementation}', 'Easy'),
    ('CF - 313A', 'Ilya and Bank Account', '{Greedy}', 'Medium'),
    ('CF - 318A', 'Even Odds', '{Math}', 'Medium'),
    ('CF - 335A', 'Banana', '{Implementation}', 'Easy'),
    ('CF - 337A', 'Puzzles', '{Sorting,Greedy}', 'Medium'),
    ('CF - 339A', 'Helpful Maths', '{Strings,Sorting}', 'Easy'),
    ('CF - 343C', 'Read Time', '{Binary Search}', 'Hard'),
    ('CF - 343D', 'Water Tree', '{Segment Tree}', 'Hard'),
    ('CF - 381A', 'Sereja and Dima', '{Greedy}', 'Medium'),
    ('CF - 405A', 'Gravity Flip', '{Implementation}', 'Medium'),
    ('CF - 435A', 'Queue on Bus Stop', '{Arrays}', 'Medium'),
    ('CF - 443A', 'Anton and Letters', '{Set}', 'Medium'),
    ('CF - 455C', 'Civilization', '{DSU}', 'Hard'),
    ('CF - 467A', 'George and Accommodation', '{Implementation}', 'Medium'),
    ('CF - 486A', 'Calculating Function', '{Math}', 'Medium'),
    ('CF - 520B', 'Two Buttons', '{BFS}', 'Medium'),
    ('CF - 546A', 'Soldier and Banana', '{Math}', 'Medium'),
    ('CF - 600E', 'Lomsat gelral', '{Tree,DSU on Tree}', 'Hard'),
    ('CF - 617B', 'Chocolate', '{Combinatorics}', 'Medium'),
    ('CF - 659A', 'Round House', '{Geometry}', 'Medium'),
    ('CF - 702A', 'Maximum Increase', '{Implementation}', 'Medium'),
    ('CF - 785A', 'Anton and Polyhedrons', '{Hash Table}', 'Medium'),
    ('CF - 791A', 'Bear and Big Brother', '{While Loops,Math}', 'Easy'),
    ('CF - 835E', 'The Penguins', '{FFT}', 'Hard'),
    ('CF - 839E', 'Mother of Dragons', '{Bitmask DP}', 'Hard'),
    ('CF - 920F', 'SUM and REPLACE', '{Segment Tree}', 'Hard'),
    ('CF - 977A', 'Wrong Subtraction', '{Implementation}', 'Easy'),
    ('CF - 977B', 'Two-gram', '{Strings}', 'Easy'),
    ('CF - 977C', 'Less or Equal', '{Binary Search}', 'Medium'),
    ('CF - 977D', 'Divide by Three', '{Graphs,Topological Sort}', 'Medium'),
    ('CF - 977E', 'Cyclic Components', '{Graphs,DFS}', 'Medium'),
    ('CF - 977F', 'Consecutive Subsequence', '{Hash Tables}', 'Medium'),
    ('CF - 999F', 'Cards and Joy', '{DP}', 'Hard'),
    ('CF - 1208D', 'Restore Permutation by Sorted Segments', '{BIT}', 'Hard'),
    ('CF - 1263D', 'Secret Passwords', '{Graph,DFS}', 'Hard'),
    ('CF - 1324E', 'Sleeping Schedule', '{DP}', 'Hard'),
    ('CF - 1326D2', 'Prefix-Suffix Palindrome (Hard Version)', '{KMP,Hashing}', 'Hard'),
    ('CF - 1344B', 'Monopole Magnets', '{DFS}', 'Hard'),
    ('CF - 1354D', 'Multiset', '{Binary Search}', 'Hard'),
    ('CF - 1375D', 'Replace by MEX', '{Greedy}', 'Hard'),
    ('CF - 1406C', 'Link Cut Centroids', '{Trees}', 'Hard'),
    ('CF - 1422D', 'Returning Home', '{DP,Shortest Path}', 'Hard'),
    ('CF - 1498C', 'Planar Reflections', '{Combinatorics,DP}', 'Hard'),
    ('CF - 1555A', 'PizzaForces', '{Greedy}', 'Medium'),
    ('CF - 1593F', 'Equalize the Array', '{Two Pointers}', 'Hard')
]

for qid,title,tags,difficulty in questions:
    cursor.execute("""INSERT INTO questions(id, qid, title, tags, difficulty)
        VALUES (%s, %s, %s, %s, %s)""", 
        (str(uuid.uuid4()), qid, title, tags, difficulty))
    
conn.commit()  #saves insertions

#closing connections
cursor.close()
conn.close()

print("done.")
